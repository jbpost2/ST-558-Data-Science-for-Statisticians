---
title: "Manipulating Data with `tidyr`"
format: html
editor: source
toc: TRUE
editor_options: 
  chunk_output_type: console
---

We now have a good handle on common actions we want to take on our data frames. However, we've been treating our data as though it is already in **long format** where each row consists of one observation and each column one variable.

This isn't always the case! Sometimes we have **wide format** data where we may have more than one observation in a given row.

```{r, out.width="450px", echo = FALSE, fig.align='center', fig.alt = "A data frame in long format is shown. This data frame has one observation per row - here patient, weight and year. This is transformed to wide format where multiple observations exist in one row - here patient, weight in 2018, weight in 2019, and weight in 2020."}
knitr::include_graphics("img/longWideF.png")
```

You might see wide data if you deal with pivot tables in excel. It is often a nicer way to *display* data, but almost all of the plotting, summarizing, and modeling we do in statistics expects data to be in long form. Luckily, the `tidyr` package gives us nice functionality for switching between these two forms!

## `tidyr` Package

This pacakge allows us to easily manipulate data via

-   `pivot_longer()` - lengthens data by increasing the number of rows and decreasing the number of columns

    -   Most important as analysis methods often prefer this form

-   `pivot_wider()` - widens data by increasing the number of columns and decreasing the number of rows

We'll also look at a couple other functions from `tidyr` that can be useful.

### `pivot_longer()`

Consider the data set called `cityTemps.txt` available via the URL below.

```{r}
library(readr)
temps_data <- read_table(file = "https://www4.stat.ncsu.edu/~online/datasets/cityTemps.txt") 
temps_data
```

This data is in wide format as more than one observation on a city is in each row.

-   Switch to 'Long' form with `pivot_longer()`. Checking the help, the major arguments are:

    -   `cols` = columns to pivot to longer format (`cols = 2:8`)\
    -   `names_to` = new name(s) for columns created (`names_to = "day"`)\
    -   `values_to` = new name(s) for data values (`values_to = "temp"`)

```{r}
library(tidyr)
temps_data |>
  pivot_longer(cols = 2:8, 
               names_to = "day", 
               values_to = "temp")
```

That's better! Now each row has one observation in it. Recall we had a lot of functionality for selecting columns within the `tidyverse`. That holds here as well!

```{r}
temps_data |>
  pivot_longer(cols = sun:sat, 
               names_to = "day", 
               values_to = "temp")
```

### `pivot_wider()`

Occasionally we'll want to make our data wider for display purposes. We can make this switch to 'Wide' form with `pivot_wider()`. There are two major arguments we must specify:

-   `names_from` = column(s) to get the names used in the output columns
-   `values_from` = column(s) to get the cell values from

Let's consider our batting data set from the `dplyr` notes.

```{r}
library(dplyr)
library(Lahman)
batting_tbl <- as_tibble(Batting)
batting_tbl
```

We may want to get just the data for one team (say the Pirates) and display each players number of hits across the years 2018 to 2020.

-   Let's subset the data to get just the pirates (`teamID == "PIT"`)
-   Then we'll select only their hits and year columns (`playerID`, `H`, and `yearID`)
-   Then we need to pivot that data set wider so that we have the year across the top (`names_from`), the players as the rows, and the entries as the hits (`values_from`)

```{r}
batting_tbl |>
  filter(yearID %in% 2018:2020, teamID == "PIT") |>
  select(playerID, yearID, H) |>
  pivot_wider(names_from = yearID, values_from = "H")
```

Great! You can see that missing values are filled in for those that didn't play in a given year. Let's subset this to remove any rows with missing values (so we only get players that played for the pirates in all three years).

The `tidyr` function `drop_na()` does this exact thing for us!

```{r}
batting_tbl |>
  filter(yearID %in% 2018:2020, teamID == "PIT") |>
  select(playerID, yearID, H) |>
  pivot_wider(names_from = yearID, values_from = "H") |>
  drop_na()
```

Let's also remove those with 0 hits:

```{r}
batting_tbl |>
  filter(yearID %in% 2018:2020, teamID == "PIT", H > 0) |>
  select(playerID, yearID, H) |>
  pivot_wider(names_from = yearID, values_from = "H") |>
  drop_na()
```

The column names `2018`, `2019`, and `2020` are non-standard names as they start with a number. That's not ideal so let's rename those too!

```{r}
batting_tbl |>
  filter(yearID %in% 2018:2020, teamID == "PIT", H > 0) |>
  select(playerID, yearID, H) |>
  pivot_wider(names_from = yearID, values_from = "H") |>
  drop_na() |>
  rename('year2018' = `2018`,
         'year2019' = `2019`,
         'year2020' = `2020`)
```

Would be better with actual player names (we'll learn about how to combine this data set with another one that has their actual names soon!)

```{r}
batting_tbl |>
  filter(yearID %in% 2018:2020, teamID == "PIT", H > 0) |>
  select(playerID, yearID, H) |>
  pivot_wider(names_from = yearID, values_from = "H") |>
  drop_na() |>
  rename('year2018' = `2018`,
         'year2019' = `2019`,
         'year2020' = `2020`) |>
  dplyr::inner_join(select(People, playerID, nameFirst, nameLast)) |>
  select(nameFirst, nameLast, everything())
```

### Column Manipulations with `tidyr`

-   Separate a column using `separate_wider_delim()` (a few other variants exist as well)
-   Combine two columns with `unite()`

```{r, out.width="650px", echo = FALSE, fig.align='center', fig.alt = "A data frame is visualized with a date column. Dates are in the form MM/DD/YYYY. This column is then separated into three columns: month, day, and year."}
knitr::include_graphics("img/uniteSeparateF.png")
```

-   Consider data set on air pollution in Chicago

```{r}
chicago_data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/Chicago.csv")
chicago_data
```

-   Although we saw that we should treat date variables as `date` objects (say from `lubridate`), we could manually separate out the dates we see here. We can notice that the month comes first followed by a `/`, then the day, a `/`, and the year.

    -   We can split on the delimiter `/`

    -   The arguments to give `separate_wider_delim()` are:

        -   `cols` = the columns we want
        -   `delim` = the delimiter
        -   `names` = new names for the split variables
        -   `cols_remove` - binary, whether to remove the original column or not

```{r}
chicago_data |>
  separate_wider_delim(cols = date, 
                       delim = "/", 
                       names = c("Month", "Day", "Year"), 
                       cols_remove = FALSE)
```

Nice! These are character strings so we might want to turn them into numbers but, again, we'd really want to use `date` type data for these anyway.

-   `unite()` allows us to combine two columns into one

    -   Perhaps we want a new column with the date and the season together (for display purposes)
    -   We just pass `unite()` the name of the new column (`col =`), the columns we want to combine, and the separator to use (`sep =`)

```{r}
chicago_data |>
  unite(col = "season_date", season, date, sep = ": ") |>
  select(season_date, everything())
```

### Recap!

-   `pivot_wider()` & `pivot_longer()` great for reshaping data

-   `unite()` & `separate_wider_*()` nice for dealing with columns

-   [`tidyr` Cheat Sheet](https://rstudio.github.io/cheatsheets/html/tidyr.html)

Use the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!