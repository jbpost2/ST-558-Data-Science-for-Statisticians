[
  {
    "objectID": "Notes/06-Quarto.html",
    "href": "Notes/06-Quarto.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "Data Science!\n\nRead in raw data and manipulate it\nCombine data sources\nSummarize data to glean insights\nApply common analysis methods\nCommunicate Effectively\n\nThis entire process must be reproducible! Git and github certainly help but we also need to make sure that we document our thoughts and process as we work through cleaning our data, summarizing it, and fitting our models.\nThere are two major tools to enhance how we program that work very well with RStudio:\n\nR Markdown:\n\nAllows for writing of thought processes, code, and interpretations\nEasy to create many types of final documents: HTML pages, PDFs, slideshows, and more!\nCreated via a .Rmd (R markdown file)\n\nQuarto: Next generation version of R Markdown!\n\nBuilt to use multiple programming languages (R, python, and Julia) easily\nWorks with Jupyter Notebook format as well\nCreated via a .qmd (quarto markdown file)\nRenders most .Rmd files as is!\n\n\nWe’ll go through the basics to get you started. Much more is available on the quarto docs page, the RStudio quarto integration page, and in the R for Data Science book."
  },
  {
    "objectID": "Notes/06-Quarto.html#what-do-we-want-to-be-able-to-do",
    "href": "Notes/06-Quarto.html#what-do-we-want-to-be-able-to-do",
    "title": "Quarto Basics",
    "section": "",
    "text": "Data Science!\n\nRead in raw data and manipulate it\nCombine data sources\nSummarize data to glean insights\nApply common analysis methods\nCommunicate Effectively\n\nThis entire process must be reproducible! Git and github certainly help but we also need to make sure that we document our thoughts and process as we work through cleaning our data, summarizing it, and fitting our models.\nThere are two major tools to enhance how we program that work very well with RStudio:\n\nR Markdown:\n\nAllows for writing of thought processes, code, and interpretations\nEasy to create many types of final documents: HTML pages, PDFs, slideshows, and more!\nCreated via a .Rmd (R markdown file)\n\nQuarto: Next generation version of R Markdown!\n\nBuilt to use multiple programming languages (R, python, and Julia) easily\nWorks with Jupyter Notebook format as well\nCreated via a .qmd (quarto markdown file)\nRenders most .Rmd files as is!\n\n\nWe’ll go through the basics to get you started. Much more is available on the quarto docs page, the RStudio quarto integration page, and in the R for Data Science book."
  },
  {
    "objectID": "Notes/06-Quarto.html#markdown-idea",
    "href": "Notes/06-Quarto.html#markdown-idea",
    "title": "Quarto Basics",
    "section": "Markdown Idea",
    "text": "Markdown Idea\nMarkdown is a simpler version of a markup language. HTML is the most commonly known markup language (HTML = Hypertext markup language). With HTML you use tags to specify things that a web browser like chrome interprets. For instance,\n&lt;h1&gt;My first level header&lt;/h1&gt;\n&lt;a href = \"https://www.google.com\"&gt;Link to a search engine.&lt;/a&gt;\nis HTML interpreted by your browser to be a header and a link. Markdown is a simpler version of this. There are many markdown languages (include quarto markdown, R markdown, and github markdown) but most have the same base structure. An equivalent way to write the above would be\n# My first level header\n[Link to a search engine](https://www.google.com)\nWhere R markdown and quarto go beyond is in the ability to weave R code into the equation!\n\nYou can include code chunks in your markdown.\nYou then render the markdown through RStudio (or the command line).\nThe R code runs and output is included in the final document!\nIt is very awesome."
  },
  {
    "objectID": "Notes/06-Quarto.html#documenting-with-markdown-via-quarto",
    "href": "Notes/06-Quarto.html#documenting-with-markdown-via-quarto",
    "title": "Quarto Basics",
    "section": "Documenting with Markdown via quarto",
    "text": "Documenting with Markdown via quarto\nDesigned to be used in three ways (R for Data Science)\n\nCommunicating to decision makers (focus on conclusions not code)\nCollaborating with other data scientists (including future you!)\nAs environment to do data science (documents what you did and what you were thinking)\n\nIt is easy to create many types of documents in quarto! Go to file –&gt; New File –&gt; Quarto Document\n\n\n\n\n\n\n\n\n\nSelect HTML as that is the easiest to render (build as the output). Save the template file that is produced (this will be a .qmd file).\n.qmd files contain three important types of content:\n\n(Optional) YAML header surrounded by ---s\n\nDefines meta data about the document\n\nChunks of R code\n\nCode that may evaluate and produce output when knitting the document\n\nText mixed with simple text formatting instructions (Markdown syntax)\n\nThere is a visual editor in RStudio (similar to a word processing program) and a source editor. I’d recommend starting with the visual editor and trying to move to the source quickly. You’ll be way more efficient using the source editor.\n\nYAML Header\nYAML stands for “Yet Another Markup Language” or “YAML ain’t markup language”. This defines settings for the creation process (when you go to render the document).\nAs we used an HTML for our document, you should see something similar to this in the top part of your document:\n---\ntitle: \"Untitled\"\nformat: html\neditor: visual\n---\nIf you render the document (which I’ll likely call Knitting as that is what it was called with R Markdown), it obeys these instructions for what to create.\n\nTry to render the document and see if you can get the HTML output.\n\nDo this via the “Render” button or by using hot keys: CTRL/CMD + Shift + k\n\n\n\n\nMarkdown Syntax\nIn the template document created you’ll also see some text. Some of it is larger, some of it links, some of it plain text. If you click on the “Source” you’ll see the markdown syntax that you can use to spice up your outputted document:\n\n\n\n\n\n\n\n\n\nThe syntax is really easy to pick up. Below you’ll find some commonly used markdown syntax:\n\n# R Markdown \\(\\rightarrow\\) First level header\n## Next \\(\\rightarrow\\) Second level header\n**Knit** or __Knit__ \\(\\rightarrow\\) Bold font (Knit)\n*italic* or _italic_ \\(\\rightarrow\\) Italic font (italic)\n*__both__* \\(\\rightarrow\\) Bold and italic (both)\n&lt;https://rstudio.github.io/cheatsheets/quarto.pdf&gt; \\(\\rightarrow\\) A hyperlink: https://rstudio.github.io/cheatsheets/quarto.pdf\n[Cheat Sheet link](https://rstudio.github.io/cheatsheets/quarto.pdf) \\(\\rightarrow\\) Cheat Sheet link\n\nCheck this site for markdown basics. (Headers can be used to easily create a table of contents (and is useful for accessibility of documents).)\n\n\nCode Chunks\nThe real power of quarto and R markdown is the ability to run R code when rendering and having the output show in the final document. This saves so much time and makes updating reports/documents a breeze!\nA code chunk looks like the following:\n\n\n\n\n\n\n\n\n\n\nStart a code chunk by typing out the syntax or with CTRL/CMD + Alt/Option + I\nWhen rendering:\n\nChunks run sequentially in the document\nChunks share objects. Essentially an R environment is created when rendering a document and all objects created in chunks are stored in it.\nCan specify behavior of each code chunk (show R code or hide it, evaluate or don’t evaluate) and set global chunk behavior\n\n\nTo change the behavior of code chunks, we use chunk options:\n\nHide/show code with echo = FALSE/TRUE\n\nChoose if code is evaluated with eval = TRUE/FALSE\n\nHave code evaluate, not show, and show no output with include = TRUE/FALSE\nTurn on/off displaying of messages or warnings with message = TRUE/FALSE and warning = TRUE/FALSE\n\nSpecifying these options in the top part of the code chunk is the R Markdown way of doing things (still acceptable)\n\n\n\n\n\n\n\n\n\nHowever, the new, better, way of doing it is via special comments.\n\nOne important difference between R Markdown documents and Quarto documents is that in Quarto chunk options are typically included in special comments at the top of code chunks rather than within the line that begins the chunk. For example:\n\n\n\n\n\n\n\n\n\n\nWith quarto, if you want to specify global chunk options the best way to do so is in the YAML header. Be very careful about spacing in YAML headers!\nHere is an example that would make all code chunks be ‘collapsed’ by default.\n---\ntitle: \"My Document\"\nformat: html\nknitr:\n  opts_chunk: \n    collapse: true\n---\nYou can also still set code chunk options in a setup code chunk. This is just a code chunk you put at the beginning of the document that sets options for you. Something like the following in a code chunk:\n#| include: false\nknitr::opts_chunk$set(echo = FALSE, eval = TRUE, warning = FALSE)\nThe include: false tells knitr not to include the code or output of this chunk in the final document.\nPlease pop this video out and watch it in the full panopto player!\n\nThis wraps up week 1!"
  },
  {
    "objectID": "Notes/04-R_Basics_Landing.html",
    "href": "Notes/04-R_Basics_Landing.html",
    "title": "R Basics",
    "section": "",
    "text": "The video below discusses the basic use of R through RStudio. We discuss how to create an R object, how to learn more about R objects, and the basics of object oriented programming in R.\nI highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer."
  },
  {
    "objectID": "Notes/04-R_Basics_Landing.html#notes",
    "href": "Notes/04-R_Basics_Landing.html#notes",
    "title": "R Basics",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!"
  },
  {
    "objectID": "Notes/02-Workflows_Git_GitHub_Basics_Landing.html",
    "href": "Notes/02-Workflows_Git_GitHub_Basics_Landing.html",
    "title": "Workflows & Git/GitHub Basics",
    "section": "",
    "text": "The video below discusses data workflows and the basics of Git and GitHub. I highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer."
  },
  {
    "objectID": "Notes/02-Workflows_Git_GitHub_Basics_Landing.html#notes",
    "href": "Notes/02-Workflows_Git_GitHub_Basics_Landing.html#notes",
    "title": "Workflows & Git/GitHub Basics",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!"
  },
  {
    "objectID": "Notes/00-Week1_Overview.html",
    "href": "Notes/00-Week1_Overview.html",
    "title": "Overview",
    "section": "",
    "text": "This first week we’ll mainly work on getting our workflow setup and introducing ourselves to some big ideas of the course:"
  },
  {
    "objectID": "Notes/00-Week1_Overview.html#learning-materials",
    "href": "Notes/00-Week1_Overview.html#learning-materials",
    "title": "Overview",
    "section": "Learning Materials",
    "text": "Learning Materials\nAfter reading through the rest of this page, you should go through this week’s material:\n\nWhat is Data Science?\nWorkflows & Git/GitHub Basics\nGit & GitHub Practice\nR Basics\nR projects and Connecting with GitHub\nQuarto\n\nThere are also arrows at the bottom of each page to navigate to the previous page or the next page in the course!"
  },
  {
    "objectID": "Notes/00-Week1_Overview.html#additional-readings-learning-materials",
    "href": "Notes/00-Week1_Overview.html#additional-readings-learning-materials",
    "title": "Overview",
    "section": "Additional Readings & Learning Materials",
    "text": "Additional Readings & Learning Materials\n\nData Science Ideas\n\nIntroduction chapter from R for Data Science\nChapters 1 and 2 of the Practitioner’s Guide to Data Science\nThe role of statistics in Data Science and Artificial Intelligence\nData Science wikipedia entry\n\nR Projects and General R \n\nChapter 6 from R for Data Science\n\nQuarto readings:\n\nChapters 28 & 29 from R for Data Science\n(Optional) Quarto documentation. Specifically, the using R portion)\nQuarto is the next generation of R Markdown. It will run most .Rmd (R markdown) files. Therefore, this awesome R Markdown book is really useful.\n\nGit/GitHub\n\ngithub’s hello-world\nChapter 1 and readings of your choice from Happy Git and GitHub for the useR (formerly happygitwithR)"
  },
  {
    "objectID": "Notes/00-Week1_Overview.html#week-1-learning-objectives",
    "href": "Notes/00-Week1_Overview.html#week-1-learning-objectives",
    "title": "Overview",
    "section": "Week 1 Learning Objectives",
    "text": "Week 1 Learning Objectives\nUpon completion of this week, students will be able to: (CO is the corresponding course learning objective this helps build toward)\n\nData Science Ideas\n\nlist the common duties of a data scientist (CO 5, 6)\ncreate a github repository (CO 6)\nfork, edit, and push changes to a repository (CO 6)\nconnect R Studio with github (CO 6)\n\npush, pull, fork, etc. using the terminal in R or the git tab\n\n\n\n\nR Basics\n\nutilize R as a calculator (CO 1)\ndescribe the term object oriented program and the general idea of methods (CO 1)\n\n- store objects and change their attributes\n\ndescribe the idea of an R package (CO 3)\ndescribe the usefulness of R projects (CO 6)\n\nsave and load an R project\nexplain working directories, change a working directory, and specify paths to files\n\n\n\n\nQuarto\n\nlist and describe the three major parts of a quarto document (YAML header, code chunks, and plain text with formatting syntax) (CO 1, 6) a. outline the idea of a markdown or markup language\ncreate a quarto document (CO 1, 3, 6) a. write plain text in quarto markdown syntax b. create and change options for R code chunks c. explain what global chunk options are and how to set them d. add functionality (such as tables of contents) to outputs\ndescribe the term digital notebook (CO 6) a. explain how R studio can be used as a notebook environment b. run code in the markdown editor\nproduce common types of final documents using quarto (CO 1, 3, 6) a. utilize both code, menus, and shortcuts to create a document type\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for Statisticians",
    "section": "",
    "text": "Welcome to ST 558 - Data Science for Statisticians!\nIn this course we’ll look at common tasks done by data scientists:\nWe’ll adopt the R programming language to do so and learn about using quarto, git, and github to ensure our data analysis workflow is reproducible, has version control, and can easily include collaborators."
  },
  {
    "objectID": "index.html#course-learning-outcomes",
    "href": "index.html#course-learning-outcomes",
    "title": "Data Science for Statisticians",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\nAt the end of this course students will be able to\n\nexplain the steps and purpose of programs\nefficiently read in, combine, and manipulate data\nutilize help and other resources to customize programs\nwrite programs using good programming practices\nexplore data and perform common analyses\ncreate reports, web pages, and dashboards to display and communicate results"
  },
  {
    "objectID": "index.html#weekly-to-do-list",
    "href": "index.html#weekly-to-do-list",
    "title": "Data Science for Statisticians",
    "section": "Weekly To-do List",
    "text": "Weekly To-do List\nGenerally speaking, each week will have a few videos to watch and readings to do as well as corresponding homework assignments (see the syllabus on Moodle for homework policies).\n\nThere will be two exams and the exam windows (days when you can take the exams) are available on the syllabus and course schedule.\nThere will be three projects, the third of which will count as the final for the course. These will require a reasonably substantial time commitment."
  },
  {
    "objectID": "index.html#getting-help",
    "href": "index.html#getting-help",
    "title": "Data Science for Statisticians",
    "section": "Getting Help!",
    "text": "Getting Help!\nTo obtain course help there are a number of options:\n\nDiscussion Forum on Moodle - This should be used for any question you feel comfortable asking and having others view. The TA, other students, and I will answer questions on this board. This will be the fastest way to receive a response!\n\nE-mail - If there is a question that you don’t feel comfortable asking the whole class you can use e-mail. The TA and I will be checking daily (during the regular work week).\nZoom Office Hour Sessions - These sessions can be used to share screens and have multiple users. You can do text chat, voice, and video. They are great for a class like this!"
  },
  {
    "objectID": "index.html#fall-2024-course-schedule",
    "href": "index.html#fall-2024-course-schedule",
    "title": "Data Science for Statisticians",
    "section": "Fall 2024 Course Schedule",
    "text": "Fall 2024 Course Schedule\n\n\n\nTopic/Week\nLearning Materials\nAssignments\n\n\n\n\nWeek 1\n8/19-8/23\nM-F\nRead - Week 1 Overview\n01 - Read - What is Data Science?\n02 - Watch - Workflows & Git/GitHub Basics\n03 - Read - Git & GitHub Practice\n04 - Watch - R Basics\n05 - Read & Watch - R projects and Connecting with Github\n06 - Read & Watch - Quarto\nHW 1 due W, 8/28\n\n\nWeek 2\n8/26-8/30\nM-F\n07 - Base R Data Structures: Vectors\n08 - Base R Data Structures: Matrices\n09 - Base R Data Structures: Data Frames\n10 - Base R Data Structures: Lists\nHW 2 due W, 9/4\n\n\nWeek 3\n9/3-9/6\nT-F (Off M)\n11 - Control Flow: Logicals & if/then/else\n12 - Control Flow: Loops\n13 - Control Flow: Vectorized Functions\n14 - Writing Functions\nHW 3 due W, 9/11\n\n\nWeek 4\n9/9-9/13\nM-F\n15 - Packages\n16 - Tidyverse Essentials\n17 - Reading Delimited Data\n18 - Reading Excel Data\n19 - Manipulating Data with dplyr\nHW 4 due W, 9/18\n\n\nWeek 5\n9/16-9/20\nM, W-F (Off T)\n20 - Manipulating Data with tidyr\n21 - Connecting to Databases\n22 - SQL Style Joins\n23 - Querying APIs & Dealing with JSON Data\nProject 1 due W, 10/2\n\n\nWeek 6\n9/23-9/27\nM-F\nNo new material. Exam study time and project work time!\nExam 1 - Th-F, 9/26-9/27\n\n\nWeek 7\n9/30-10/4\nM-F\n24 - EDA Concepts\n25 - Summarizing Categorical Variables\n26 - Barplots & ggplot2 Basics\n27 - Numerical Variable Summaries\n28 - Numerical Variable Graphs & More ggplot2\nHW 5 due W, 10/9\n\n\nWeek 8\n10/7-10/11\nM-F\n28 - Big Recap\n29 - Apply Family of Functions\n30 - purrr & List Columns\n31 - Advanced Function Writing\nHW 6 due W, 10/16\n\n\nWeek 9\n1 0/16-10/18\nOff M/T\n32 - Introduction to RShiny\n32.5 - Selected Shiny Tutorials\n33 - Connecting the UI and Server\n33.5 - More selected Tutorials\n34 - Reactivity\n34.5 - Build an App Tutorial\nHW 7 due W, 10/23\n\n\nWeek 10\n1 0/21-10/25\nM-F\n35 - Dynamic UIs\n36 - UI Layouts\n36.1 - Sharing an App via shinyapps.io\n36.2 - Sharing an App via GitHub\n37 - Debugging & Useful Things\n37.1 - Control Reactivity with isolate()\nProject 2 due W, 11/6\n\n\nWeek 11\n10/28-11/1\nNo new material. Project work time!\n\n\n\nWeek 12\n11/4-11/8\nM-F\n38 - Modeling Concepts: Inference vs Prediction\n39 - Prediction & Training/Test Set Ideas\n40 - Cross Validation\n41 - Multiple Linear Regression Models\n42 - Modeling with tidymodels\n42.5 - tidymodels Tutorial\nHW 8 due W, 11/13\n\n\nWeek 13\n1 1/11-11/15\nM-F\n43 - LASSO Models & Selecting Models with Both CV and a Test Set\n44 - Modeling Recap\n45 - Logistic Regression Models\n46 - Regression & Classification Trees\n47 - Ensemble Learning: Bagged Trees & Random Forests\nHW 9 due W, 11/20\n\n\nWeek 14\n1 1/18-11/22\nM-F\n48 - Creating an API\n49 - Docker Basics\n50 - Building a Docker Image\n51 - Dockerizing a Shiny App\nExam 2 - Th-F, 11/21-11/22\n\n\nWeek 15-16\n1 1/25-11/26, 12/2-12/3\nM-T, M-T\nNo new material. Final project work time!\nFinal Project due Th, 12/5"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Notes/01-What_is_Data_Science.html",
    "href": "Notes/01-What_is_Data_Science.html",
    "title": "What is Data Science?",
    "section": "",
    "text": "First, let’s get some perspectives on what data science is, how statistics and computer science relate, and important items to consider when trying to understand data. To do so, we’ll do some readings.\nIn the weekly overview, there are a number of readings about the general idea of data science (placed here for convenience).\n\nIntroduction of R for Data Science\nChapters 1 and 2 of the Practitioner’s Guide to Data Science\nThe role of statistics in Data Science and Artificial Intelligence\nData Science wikipedia entry\n\nSome entries from some less reputable/reviewed places are below. Please read these as well but put less weight on the things mentioned in these articles - I’m just assigning these readings so you can see the different perspectives people may have.\n\nhttps://www.indeed.com/career-advice/finding-a-job/data-scientist-vs-statistician\nData Science vs. Data Analytics vs. Machine Learning - Expert Talk\nhttps://scientistcafe.com/ids/comparison-between-statistician-and-data-scientist.html\n\nYou’ll write about these ideas as part of your first homework assignment! For now, onto understanding data workflows and Git and GitHub basics!\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!"
  },
  {
    "objectID": "Notes/03-Git_GitHub_Practice.html",
    "href": "Notes/03-Git_GitHub_Practice.html",
    "title": "Git & GitHub Practice",
    "section": "",
    "text": "Hopefully you now have some idea about the purpose of Git/GitHub. GitHub is an online hosting service for Git repositories. If you’ve never used Git and GitHub before it is really quite intimidating. We’ll start small and build as we go through the semester! Now you should do some practice!\n\nFirst, go to github.com and signup for a GitHub account (if you haven’t already).\nOnce you have an account, read this introduction to GitHub here (we’ll look at using Git and the command line shortly - for now we’ll stick to the web editor).\nFollow the steps to create your first repository and do some Git actions!\n\nPart of your first assignment will include creating a GitHub repo and corresponding webpage!\nOnce you’ve completed the above part. You should download Git to your computer.\n\nSee the installing Git page or the corresponding chapter from happy git with R (this one includes some troubleshooting as well).\nFor Windows, there aren’t many things to select as you install but go ahead and include the bash terminal if that’s an option.\n\nNow read through the introduce yourself to Git chapter of happygitwithr.\n\nFor those that want to use the shell/terminal: Mac has a native shell/terminal/command line interpreter (usually called terminal in your launchpad area).  For Windows folks, after you’ve installed Git you’ll have access to the Git Bash terminal.  Access this by clicking on the start menu and typing in bash. You can also use the command prompt in Windows (cmd in the start menu). I’ll use a bit of both the bash terminal and the Windows command prompt. Commands differ but the functionality is very similar.\n\nGreat, now try to work through chapters 9, 11, and 12 of happygitwithr.\n\nIf you get stuck here, that’s ok. Just move on! This part isn’t really required right now but should be figured out soon so that you can start working seamlessly!\nIf stuck, there is a bit more material about Git/GitHub/RStudio this week. Check that out and then maybe come back here.\nSet up a meeting with me if you can’t figure this part out (no rush!).\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!"
  },
  {
    "objectID": "Notes/03-Git_GitHub_Practice.html#getting-comfortable-with-github",
    "href": "Notes/03-Git_GitHub_Practice.html#getting-comfortable-with-github",
    "title": "Git & GitHub Practice",
    "section": "",
    "text": "Hopefully you now have some idea about the purpose of Git/GitHub. GitHub is an online hosting service for Git repositories. If you’ve never used Git and GitHub before it is really quite intimidating. We’ll start small and build as we go through the semester! Now you should do some practice!\n\nFirst, go to github.com and signup for a GitHub account (if you haven’t already).\nOnce you have an account, read this introduction to GitHub here (we’ll look at using Git and the command line shortly - for now we’ll stick to the web editor).\nFollow the steps to create your first repository and do some Git actions!\n\nPart of your first assignment will include creating a GitHub repo and corresponding webpage!\nOnce you’ve completed the above part. You should download Git to your computer.\n\nSee the installing Git page or the corresponding chapter from happy git with R (this one includes some troubleshooting as well).\nFor Windows, there aren’t many things to select as you install but go ahead and include the bash terminal if that’s an option.\n\nNow read through the introduce yourself to Git chapter of happygitwithr.\n\nFor those that want to use the shell/terminal: Mac has a native shell/terminal/command line interpreter (usually called terminal in your launchpad area).  For Windows folks, after you’ve installed Git you’ll have access to the Git Bash terminal.  Access this by clicking on the start menu and typing in bash. You can also use the command prompt in Windows (cmd in the start menu). I’ll use a bit of both the bash terminal and the Windows command prompt. Commands differ but the functionality is very similar.\n\nGreat, now try to work through chapters 9, 11, and 12 of happygitwithr.\n\nIf you get stuck here, that’s ok. Just move on! This part isn’t really required right now but should be figured out soon so that you can start working seamlessly!\nIf stuck, there is a bit more material about Git/GitHub/RStudio this week. Check that out and then maybe come back here.\nSet up a meeting with me if you can’t figure this part out (no rush!).\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!"
  },
  {
    "objectID": "Notes/05-R_Projects_Connecting_with_GitHub.html",
    "href": "Notes/05-R_Projects_Connecting_with_GitHub.html",
    "title": "R projects and Connecting with Github",
    "section": "",
    "text": "When considering our data science workflow, we want to have a seamless way to\nAll of this can be accomplished using R projects with git and github!"
  },
  {
    "objectID": "Notes/05-R_Projects_Connecting_with_GitHub.html#r-projects",
    "href": "Notes/05-R_Projects_Connecting_with_GitHub.html#r-projects",
    "title": "R projects and Connecting with Github",
    "section": "R Projects",
    "text": "R Projects\nFirst, it is important to know that we are going to be reading in some files locally. That is, from a folder somewhere on your computer (as opposed to reading a file in from the web). That means we need to be able to tell R where a file exists on our computer.\n\nLocating Files\nHow does R locate the file?\n\nWe can give a full path name to the file\n\nex: C:/Users/jbpost2/Documents/Repos/ST-558/datasets/\nex: C:\\\\\\\\Users\\\\\\\\jbpost2\\\\\\\\Documents\\\\\\\\Repos\\\\\\\\ST-558\\\\\\\\datasets\n\n\nNote: The \\ character is called an escape character. This allows us to use different symbols and things when we are working within a string of text. For instance, \\n is a line break. The \\ tells R to interpret the next character(s) in a different way than usual.\nFor example (cat is kind of like a different version of a print function):\n\ncat(\"Hi my names is Justin. I work at NC State.\")\n\nHi my names is Justin. I work at NC State.\n\n\nwith the \\n in there we get a line break:\n\ncat(\"Hi my names is Justin.\\nI work at NC State.\")\n\nHi my names is Justin.\nI work at NC State.\n\n\nTherefore, when we specify a path to a file as a string, if we try to use a \\ we actually need two \\\\ so that R knows we actually want a \\! Confusing I know. But, we can just replace \\ with / in paths to files to avoid that.\n\nFull path names are not good to use generally!\n\nIf you share your code with someone else, they don’t have the same folder structure, username, etc.\nInstead, use a relative path. That is, a path from R’s current working directory (the place it looks by default)\n\nDetermine R’s working directory via getwd() (get working directory)\n\n\ngetwd()\n\n[1] \"C:/Users/jbpost2/ST-558-Data-Science-for-Statisticians/Notes\"\n\n\nNow if I had my file in the same folder as my working directory, I don’t need to use a full path as R is looking in that folder by default. If I had the file chickens.csv in my working directory, I could tell R where it is via something like:\n\nread.csv(\"chickens.csv\")\n\n\nGreat! How do we set that working directory? Via setwd() (set working directory)\n\n\nsetwd(\"C:/Users/jbpost2/Documents/Repos/ST-558/datasets/\")\n\n\nWe can also set it via menus:\n\n\n\n\n\n\n\nOk, but our goal is to share our code with others so they can run it. We could say to our collaborators, “just to update that one line of code to change your working directory and make sure to have all the files in the same directory that we use for this analysis.” Clearly, that isn’t an efficient way to work….\nInstead we can use R projects!\n\n\n\nUsing an R Project\n\nAs we often have many files associated with each analysis, it can make keeping analysis separate difficult. The project feature in RStudio is made to alleviate this!\n\nR projects provide a straightforward way to divide your work into multiple contexts. Each with their own:\n\nWorking directory\nWorkspace (environment with stored data/objects)\nHistory\nFolder structure & source documents\n\nThey are very easy to create!\n\n\n\n\n\n\nWhen you create an R project, you might note that it gets associated with a directory (or folder or repo). That folder is what the project uses as the working directory.\n\nThis is important! This means if we can share an entire folder (with subfolders and everything else in the same relative place), another user can pick up an R project and the paths to things should work! (Assuming we’ve used relative paths for everything.)\nThat’s exactly how we’ll use R projects with github! Github is a remote folder (that can have subfolders and what-not). If we associate an R project with that folder and upload that, another user can download it and open that R project, allowing them to work seamlessly!\n\nYou might create a new project for materials related to this course or for each homework assignment etc. It is up to you how much clarity you want on a specific folder/project you are working on.\nNote you can quickly switch between projects in the upper right hand of RStudio or via the File menu."
  },
  {
    "objectID": "Notes/05-R_Projects_Connecting_with_GitHub.html#connecting-gitgithub-with-rstudio",
    "href": "Notes/05-R_Projects_Connecting_with_GitHub.html#connecting-gitgithub-with-rstudio",
    "title": "R projects and Connecting with Github",
    "section": "Connecting Git/GitHub with RStudio",
    "text": "Connecting Git/GitHub with RStudio\nIdeally we want to document our process, easily collaborate, and widely share our work\n\nFor reproducibility, ideally we would save different versions of our analysis, write-up, etc. along the way\nRemember that Git is a version control software to help:\n\nTrack the changes we commit to the files\nAllow multiple users to work on the same project\n\nGitHub is a hosting service that allows us to do Git-based projects on the internet and share them widely!\n\nRecall our basic workflow. First we create a repo on GitHub (remotely). We then associate a folder on our local computer with that repo using Git. Then we:\n\nPull down most recent files (git pull) or do initial download (git clone)\nAdd files you want to keep changes to (git add)\nCommit to the changes (git commit)\nPush the changes to the remote repo (git push)\n\nLet’s go through some explicit steps to do this! Make sure you’ve downloaded Git to your machine already (see earlier material on Git/GitHub)!\n\nCloning a Repo & Working in RStudio\nWe don’t want to use github.com web interface as that is inefficient.\n\nWe can clone the repo (i.e. download the entire repo locally).\nRepo main page has a green button. Click on that.\n\nCan download a zip and unzip it to an appropriate folder\n\n\n\n\n\n\n\n\nBetter to clone the repo via the URL and use RStudio! Open RStudio,\n\ngo to File –&gt; new project\nselect from version control\nchoose Git\npaste in the repo link\nselect a directory to save this repo in\nhit create project!\n\nNow have the files locally and this associates an R project with a Git repo!\nTry it with my repo here: https://github.com/jbpost2/ZScores.git\n\nYou won’t have access to push files to this repository though!\n\n\nTry this out on your own! Create your own repo on GitHub. Then try to download it as an R project.\n\n\nCommunication Between GitHub and RStudio\nWe need to make sure RStudio and github can communicate. This can sometimes be tough to get working! Do the following:\n\nModify a file in the github repo you just created and downloaded (the one you own).\nGo to the Git tab in your Environment area\nYou should see any files with changes\nCan add files that you’d like to commit up to the remote repo\nClick on all of the boxes (equivalent to git add -A when using the command line) and click the Commit button\nA window pops up with a comparison of files. When satisfied, write a commit message in the box and click the commit button (equivalent to git commit -m \"message\" when using the command line)\nHit close on that window\nClick the push button in the top right (equivalent to git push when using the command line)\nYou may be prompted to log-in in some way. If not, repo on gitub.com should show the changes!\n\n\n\nUsing the Command Line Interface (CLI)\nWhen working by myself on a repo, I’m not worried about merge conflicts with other people’s changes. As such, my workflow is as follows:\n\nOpen the appropriate project in RStudio\nGo to the Terminal and type git pull\nWork… at a good spot for saving, back to the terminal\nType git add -A to add all files that have been modified\nType git commit -m \"Message\" to stage a commit\nType git push to push the local changes to the remote repo\n\n\n\nCreating a Repo From an Existing R Project\nSometimes you’ll have an R project that already exists but you don’t have a corresponding repo on GitHub. The easiest way to get that project into a repo is to do the following:\n\nCreate a new repository on GitHub\nClone it to your computer via RStudio new project (in a different folder than your current project)\nMove all the files from the R Project you already have into the new project folder\nadd, commit, and push up the files\n\nPlease pop this video out and watch it in the full panopto player!\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!"
  }
]