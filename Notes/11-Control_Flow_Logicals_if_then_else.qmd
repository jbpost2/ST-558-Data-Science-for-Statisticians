---
title: "Control Flow: Logicals & if/then/else"
format: html
editor: source
toc: TRUE
editor_options: 
  chunk_output_type: inline
---

# Week 3

Hopefully, you feel like you have an idea about programming in R. We've learned about the idea of R objects and how to investigate an R object via

-   `class()`
-   `typeof()`
-   `str()`

We see that R commonly uses the attributes of the object to determine how to apply (or dispatch) a function. We've looked at common R objects and how to access their elements:

-   Atomic vectors - `x[ ]`
-   Matrices - `x[ , ]`
-   Data Frames - `x[ , ]` or `x$name`
-   Lists - `x[[ ]]` or `x$name`

and how to document our code by using a notebook environment such as Quarto (along with git/github for version control and sharing/collaborating).

Now we want to look at how to control the execution of our code. The three main things we'll look at here are

-   `if/then/else` logic and syntax
-   looping to repeatedly execute code
-   vectorized functions for improved efficiency

Then we'll see how to write our own functions! We are already learning a lot of necessary material to be a data scientist. Let's go!!

## Week 3 Additional Readings/Learning Materials

### Writing Functions

- <a href="https://r4ds.hadley.nz/functions" target="_blank">Chapter 25 of R 4 Data Science</a>
- <a href = "http://adv-r.had.co.nz/Functions.html" target = "_blank">Chapter 5 of Advanced R</a>
- <a href = "https://www.r-bloggers.com/consistent-naming-conventions-in-r/" target = "_blank">Consistent naming conventions in R><a/> and <a href="https://google.github.io/styleguide/Rguide.xml" target="_blank">R's style guide</a>
- <a href="https://modern-rstats.eu/defining-your-own-functions.html#functions-that-take-functions-as-arguments-writing-your-own-higher-order-functions" target="_blank">Chapter 7 of Modern R with the tidyverse</a>

### Loops and Vectorized Functions<br>

- <a href="https://r4ds.hadley.nz/base-r" target="_blank">Chapter 27 of R 4 Data Science (27.4-27.5)</a>

## Week 3 Learning Objectives

Upon completion of this week, students will be able to: (CO is the corresponding course learning objective this helps build toward)

### Logicals & if/then/else

1. describe the idea of coercion and compare and contrast the use of implicit and explicit coercion (CO 1, 4)

    a.    outline the rules for implicit coercion
    b.    use common explicit coercion functions
    c.    hypothesize the type of coercion implicitly done by a section of R code

### For Loops and Vectorized Functions

1. describe the process of a for loop, while loop, and repeat statement in R (CO 1, 3, 4)

    a.    program R to break from a loop when conditions are met
    b.    program R to skip an iteration of a loop
    c.    utilize different “counters” or “iterators” in an R loop
    d.    explain the use and process of nested for loops
    e.    program a nested R loop in R
    f.    explain why loops are not always ideal in R

2.    program using the “apply family” of functions in R (CO 1, 3, 4)

    a.    differentiate between the apply family of functions in R including, but not limited to, mapply, sapply, lapply, apply, and replicate
    b.    manipulate R code that uses loops to instead use the proper apply function
    c.    utilize anonymous functions in calls to the apply family of functions in R

3.    recall common “vectorized” functions in R such as colMeans, rowMeans, ifelse, etc. (CO 1, 4)
4.    write their own vectorized version of a function in R (CO 1, 4)
5.    describe what an anonymous function is and how it differs from other functions (CO 1, 4)

### Writing Functions 

Note: Not all of these are covered in this week's function writing videos - we'll revisit the topic later!

1.    display code from previously written functions in R (CO 1, 3)
2.    describe the parts of an R function (CO 1, 4)
3.    describe the difference between a prefix and an infix function (CO 1, 4)

    a.    understand the order of evaluation for user created and built-in infix functions
    
4.    write an R function that has default arguments, allows for additional arguments, and returns a well-structured named object (CO 1, 3, 4)

    a.    determine appropriate uses for the stop function
    b.    develop a pipeable function that acts on a data frame and one that produces side effects
    c.    create a custom infix function

5.   describe the way that inputs can be specified to a function (CO 1, 3)

    a.    describe positional matching and predict what input values will be assigned to which function values
    b.    explain lazy evaluation and give examples of where it may be important

6.   use if/then/else logic to conditionally execute code
7.    utilize the switch function and compare and contrast its use against if/then/else logic (CO 1, 3, 4)
8.    define environments including temporary environments (CO 1)

    a.    summarize the order in which R attempts to find a requested object
    b.    sketch out the R environment framework and explain the idea of lexical scoping
    c.    discuss the concept of local variables and local environments as compared to global variables and environments
    d.    state the naming conventions for R objects


## Logical Statements

A logical statement is a comparison of two quantities. It will resolve as `TRUE` or `FALSE` (note the all caps).

-   To compare to things in `R`, we can use standard operators

    -   `==` equality check (although this isn't always the best choice!)
    -   `!=` not equal to
    -   `>=`, `>`, `<`, `<=` operators

```{r}
#Strings must be exactly the same to be equivalent
"hi" == "hi"
"hi" == " hi"
```

```{r}
4 >= 1
4 != 1
sqrt(3)^2  == 3
```

That last one should be true! The issue is the loss of precision with taking the square root of 3. Instead of using `==` we can use the `near()` function from the `dplyr` package (you may need to install this package, `install.packages("dplyr")`). To call a function directly from a package we can use `::`

```{r}
dplyr::near(sqrt(3)^2, 3)
```

That's more like it!

### `is.` Family

In addition to the standard operators, R has a family of `is.` (read as "is dot") functions. These allow you to check a lot of things about an R object or value!

```{r}
is.numeric("Word")
is.numeric(c(10, 12, 20))
```

```{r}
is.character(c(10, 12, 20))
is.character(c("10", "12"))
is.na(c(1:2, NA, 3))
```

This last one is important!

-   First, note that `R` applies the `is.na()` function element-wise to the vector. This is *not* common behavior.
-   Second, `NA` is the missing value indicator in `R`. When we start to read in data we need to check for missing values. More on that later.
-   `NA` differs from `NULL` which is the undefined value in `R`

### Logical Statements for Subsetting Data

Creating logical statements can be useful for subsetting data. We'll see how to do this in a streamlined fashion later, but for now, let's use `Base R` functionality to do some subsetting.

Recall the `iris` data set. This has measurements on flowers.

```{r}
head(iris)
```

As R does comparisons element-wise, we can compare the `Species` column to a value. This returns a vector of `TRUE` and `FALSE` values (a logical vector).

```{r}
iris$Species == 'setosa'
```

If we index an object with a logical vector, it returns the values where a `TRUE` occurred and doesn't return values where a `FALSE` occurred!

```{r}
iris[iris$Species == "setosa", ]
```

### Compound Logical Statements

Of course there are times we want to check whether two conditions are both `TRUE` or at least one of the conditions is `TRUE.` The **Logical Operators** below help us with that:

-   `&` 'and'
-   `|` 'or'

| Operator | A,B true       | A true, B false | A,B false       |
|----------|----------------|-----------------|-----------------|
| `&`      | `A & B = TRUE` | `A & B = FALSE` | `A & B = FALSE` |
| `|`      | `A | B = TRUE` | `A | B = TRUE`  | `A | B = FALSE` |

**Note!** `&&` and `||` are alternatives that look at only first comparison when given a vector of comparisons. This is used a lot in writing functions but is generally not what you want to use.

In subsetting data, this let's us do a lot more!

-   Only pull out large petal setosa flowers

```{r}
(iris$Petal.Length > 1.5) & (iris$Species == "setosa")
```

```{r}
iris[(iris$Petal.Length > 1.5) & (iris$Species == "setosa"), ]
```

The parentheses are not required but are useful to keep things straight. For example, we might want only long petal or skinny petal, setosa flowers.

```{r}
iris[((iris$Petal.Length > 1.5) | (iris$Petal.Width < 0.15)) & (iris$Species == "setosa"), ]
```

## Quick Aside on Implicit Coercion

`R` attempts to coerce data into usable form when necessary. Unfortunately, it doesn't always let us know it is doing so. This means we need to be careful and understand how `R` works.

Recall the behavior of combining elements together into an atomic vector. `R` coerces to the more flexible data type.

```{r}
#coerce numeric to string
c("hi", 10)
```

In this way, R will treat `TRUE` as a 1 and `FALSE` as a 0 when math is done.

```{r}
#coerce TRUE/FALSE to numeric
c(TRUE, FALSE) + 0
c(TRUE, FALSE) + 10
as.numeric(c(TRUE, FALSE, TRUE))
mean(c(TRUE, FALSE, TRUE))
```

The order of coercion (from least flexible to most)

-   logical
-   integer
-   double
-   character.

## Conditional Execution via `if/then/else`

We often want to execute statements conditionally. For instance, we might want to create a variable that takes on different values depending on whether or not some condition is met.

-   `if` `then` `else` syntax

```{r,eval=FALSE}
if (condition) {
  then execute code
} 

#if then else
if (condition) {
  execute this code  
} else {
  execute this code
}
```

```{r,eval=FALSE}
#Or more if statements
if (condition) {
  execute this code  
} else if (condition2) {
  execute this code
} else if (condition3) {
  execute this code
} else {
  #if no conditions met
  execute this code
}
```

**Note!** You should keep the `{` on the lines as you see here. There are some occassions where something like this would work:

```{r eval = FALSE}
if (condition) 
  {
  execute this code  
} else 
  {
  execute this code
}
```

but it generally won't! So just mind the positioning.

As an example of using `if/then/else` consider the built-in data set `airquality`. This data has daily air quality measurements in New York from May (Day 1) to September (Day 153) in 1973.

```{r}
head(airquality)
```

We may want to code a wind category variable as follows:

-   high wind days (wind $\geq$ 15mph)\
-   windy days (10mph $\leq$ wind \< 15mph)\
-   lightwind days (6mph $\leq$ wind \< 10mph)\
-   calm days (wind $\leq$ 6mph)

For a given value we can do a check and assign a new value.

```{r, error = TRUE, message = TRUE, warning = TRUE}
airquality$Wind[1]
if(airquality$Wind[1] >= 15) { 
  "High Wind"
} else if (airquality$Wind[1] >= 10){
  "Windy"
} else if (airquality$Wind[1] >= 6) {
  "Light Wind"
} else if (airquality$Wind[1] >= 0) {
  "Calm"
} else {
  "Error"
}
```

Unfortunately, to apply this to each observation requires a loop or the use of a vectorized function. We'll cover those shortly!

### Quick R video

Please pop this video out and watch it in the full panopto player!

```{=html}
<iframe src="https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=794c72ec-d2df-4321-8b23-b1710153a923&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="11 - if/then/else" ></iframe>
```

- <a href = "https://github.com/jbpost2/My_first_repo" target = "_blank">Link to repo with files from video</a>


### Recap

-   Logical comparisons resolve as `TRUE` or `FALSE`
-   Compound logical operators are `&` (and) and `|` (or)
-   `if/then/else` logic to conditionally execute code

Use the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!